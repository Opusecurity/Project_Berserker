import json
import os
from datetime import datetime

FOLDERS = {
    "brute_force": ("data/results/", "brute_forces"),
    "smb_enum": ("data/enum/", "smb_enum"),
    "web_attack": ("data/web_attack_results/", "web_attack"),
    "mitm": ("data/mitm_captures/", "mitm")
}

OUTPUT_FILE = "data/pentest_results/pentest_results.json"
LOG_FILE = "logs/pentest_results_generator.log"

os.makedirs("data/pentest_results/", exist_ok=True)
os.makedirs("logs", exist_ok=True)

def log_event(msg):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a") as f:
        f.write(f"[{timestamp}] {msg}\n")

def get_latest_json(folder, prefix):
    try:
        files = [f for f in os.listdir(folder) if f.startswith(prefix) and f.endswith(".json")]
        if not files:
            log_event(f"[!] No file found for {prefix}")
            return []
        latest = sorted(files)[-1]
        path = os.path.join(folder, latest)
        with open(path, "r") as f:
            log_event(f"[~] Loaded → {latest}")
            return json.load(f)
    except Exception as e:
        log_event(f"[!] Failed to read {prefix}: {e}")
        return []

def extract_http_post_data():
    mitm_raw = get_latest_json(*FOLDERS["mitm"])
    http_post_list = []

    if isinstance(mitm_raw, dict):
        for ip, data in mitm_raw.items():
            post_entries = data.get("http_post_data", [])
            for entry in post_entries:
                if isinstance(entry, dict):
                    entry["ip"] = ip
                    http_post_list.append(entry)
    else:
        log_event("[!] MITM data is not a dict, skipping.")

    return http_post_list

def generate_metadata():
    now = datetime.now()
    return {
        "scan_id": f"berserker-{now.strftime('%Y%m%d-%H%M%S')}",
        "total_modules": 4,
        "executed_modules": list(FOLDERS.keys()),
        "start_time": now.isoformat(),
        "end_time": now.isoformat(),
        "duration_seconds": 0
    }

def run_pentest_results_generator():
    results = {
        "metadata": generate_metadata(),
        "brute_force": get_latest_json(*FOLDERS["brute_force"]),
        "smb_enum": get_latest_json(*FOLDERS["smb_enum"]),
        "web_attack": get_latest_json(*FOLDERS["web_attack"]),
        "mitm": extract_http_post_data()
    }

    try:
        with open(OUTPUT_FILE, "w") as f:
            json.dump(results, f, indent=4)
        print(f"[✓] Pentest results saved → {OUTPUT_FILE}", flush=True)
        log_event(f"[✓] Written: {OUTPUT_FILE}")
    except Exception as e:
        print(f"[!] Failed to write JSON: {e}", flush=True)
        log_event(f"[!] Write error: {e}")

if __name__ == "__main__":
    run_pentest_results_generator()
